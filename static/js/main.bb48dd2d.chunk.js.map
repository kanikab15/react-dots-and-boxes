{"version":3,"sources":["ClickedContext.js","Line.js","constants.js","Box.js","App.js","serviceWorker.js","index.js"],"names":["ClickedContext","React","createContext","Line","line","createRef","handleClick","context","current","classList","add","setClickedLineId","props","i","onClick","Consumer","ref","key","className","x1","y1","x2","y2","strokeWidth","Component","constants","Box","areLinesOfBoxClicked","lineIdsOfBox","reduce","lineIdToClickedStatus","lineId","state","colorOfCapturedBox","this","clickedLineId","Object","values","result","curr","player1IsNext","setState","points","fill","stroke","contextType","App","dotCoordinates","lineCoordinates","boxCoordinates","player1Score","player2Score","isBoxCaptured","boxId","line0Id","line1Id","line2Id","line3Id","areLinesClicked","currLineId","isClicked","areAllBoxesCaptured","areBoxesCaptured","currBox","isCaptured","findALineFromCoordinates","lineItemsKeys","keys","length","lineItem","scoreToAdd","isAnyBoxCaptured","lineToBoxes","isAnyPrevBoxCaptured","currBoxId","isCurrBoxCaptured","cy","cx","numOfRowCols","numOfDots","x","y","x3","y3","x4","y4","height","width","viewBox","r","rx","Provider","value","map","iNum","Number","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb48dd2d.chunk.js","sourcesContent":["import React from 'react';\n\nexport const ClickedContext = React.createContext();\n","import React from 'react';\nimport {ClickedContext} from './ClickedContext';\n\nclass Line extends React.Component{\n\n  line = React.createRef();\n\n  handleClick = (context) => {\n    this.line.current.classList.add(\"line-clicked\");\n    context.setClickedLineId(this.props.i);\n    this.props.onClick(this.props.i);\n  }\n\n  render(){\n    return (\n      <ClickedContext.Consumer>\n        {(context) => (<line ref={this.line} key={'line'+this.props.i}\n        className='line' x1={this.props.x1} y1={this.props.y1} x2={this.props.x2}\n        y2={this.props.y2} strokeWidth=\"6\" onClick={() => {this.handleClick(context)}}/>)}\n      </ClickedContext.Consumer>\n    );\n  }\n}\n\nexport default Line;\n","export const constants ={\n  player1Color: \"#F29745\",\n  player2Color: \"#80BF5E\",\n  player1Win: \"Player 1 wins!\",\n  player2Win: \"Player 2 wins!\",\n  matchDraw: \"It's a draw!\"\n}\n","import React from 'react';\nimport {ClickedContext} from './ClickedContext';\nimport {constants} from './constants';\n\nclass Box extends React.Component{\n\n  constructor(props){\n    super(props);\n    let areLinesOfBoxClicked = props.lineIdsOfBox.reduce(\n      (lineIdToClickedStatus, lineId) => ({...lineIdToClickedStatus, [lineId]: false}), {});\n\n    this.state = {\n      areLinesOfBoxClicked: areLinesOfBoxClicked,\n      colorOfCapturedBox: \"\"\n    }\n  }\n\n  componentDidUpdate(){\n    let context = this.context;\n    let colorOfCapturedBox = \"\";\n    //process the line click only if it's not already been clicked and exists for this box\n    if(context.state.clickedLineId && (this.state.areLinesOfBoxClicked[context.state.clickedLineId] === false)){\n      let areLinesOfBoxClicked = this.state.areLinesOfBoxClicked;\n      areLinesOfBoxClicked[context.state.clickedLineId] = true;\n      let isBoxCaptured =\n        Object.values(areLinesOfBoxClicked).reduce((result, curr) => {return(result && curr)}, true);\n      if(isBoxCaptured && !this.state.colorOfCapturedBox)\n        colorOfCapturedBox = (this.props.player1IsNext? constants.player1Color: constants.player2Color);\n      this.setState({ // minimize set states\n        areLinesOfBoxClicked: areLinesOfBoxClicked,\n        colorOfCapturedBox: colorOfCapturedBox});\n    }\n  }\n\n  render(){\n    return (\n      <polygon key={this.props.i} points={this.props.points}\n      fill={this.state.colorOfCapturedBox? this.state.colorOfCapturedBox: 'transparent'}\n      stroke=\"white\">\n      </polygon>\n    );\n  }\n}\n\nBox.contextType = ClickedContext;\nexport default Box;\n","import React from 'react';\nimport './App.css';\nimport Line from './Line';\nimport Box from './Box';\nimport {ClickedContext} from './ClickedContext';\nimport {constants} from './constants';\n\n// TODO: ideas for CRUD - undo last move, save game\nclass App extends React.Component {\n  state = {\n    dotCoordinates : {},\n    lineCoordinates: {},\n    boxCoordinates: {},\n    clickedLineId: \"\",\n    player1IsNext: true,\n    player1Score: 0,\n    player2Score: 0,\n    result: \"\"\n  };\n\n  componentDidMount(){\n    let cy = 160;\n    let cx = 70;\n\n    const numOfRowCols = 5;\n    const numOfDots = numOfRowCols*numOfRowCols;\n    const dotCoordinates = {};\n    const lineCoordinates = {};\n    const boxCoordinates = {};\n\n    // find dot coordinates\n    for(let i=0; i<numOfDots; i++){\n      dotCoordinates[i] = {'x': cx,'y': cy};\n      cy += 90;\n      if((i+1) % numOfRowCols === 0){\n        cy = 160;\n        cx+= 90;\n      }\n    }\n\n    // find line coordinates\n    for(let i=0;i<numOfDots;i++){\n      if(i<numOfDots-numOfRowCols)\n        lineCoordinates[i]={\n                            'x1': dotCoordinates[i].x,\n                            'y1': dotCoordinates[i].y,\n                            'x2': dotCoordinates[i+numOfRowCols].x,\n                            'y2':dotCoordinates[i+numOfRowCols].y\n                          };\n      if((i+1) % numOfRowCols !== 0)\n        lineCoordinates[i+(numOfDots-numOfRowCols)]={\n                                                  'x1': dotCoordinates[i].x,\n                                                  'y1': dotCoordinates[i].y,\n                                                  'x2': dotCoordinates[i+1].x,\n                                                  'y2':dotCoordinates[i+1].y\n                                                };\n    }\n\n    // find box coordinates\n    for(let i=0;i<numOfDots;i++){\n      if((i+numOfRowCols+1)<numOfDots && (i+1)%numOfRowCols!==0){\n        boxCoordinates[i]={\n                          'x1': dotCoordinates[i].x,\n                          'y1': dotCoordinates[i].y,\n                          'x2': dotCoordinates[i+numOfRowCols].x,\n                          'y2':dotCoordinates[i+numOfRowCols].y,\n                          'x3': dotCoordinates[i+numOfRowCols+1].x,\n                          'y3':dotCoordinates[i+numOfRowCols+1].y,\n                          'x4': dotCoordinates[i+1].x,\n                          'y4': dotCoordinates[i+1].y\n                        };\n        //find lines related to each box\n        let line0Id = this.findALineFromCoordinates({x1:boxCoordinates[i].x1,y1:boxCoordinates[i].y1,\n          x2: boxCoordinates[i].x2, y2: boxCoordinates[i].y2}, lineCoordinates);\n        let line1Id = this.findALineFromCoordinates({x1:boxCoordinates[i].x2, y1:boxCoordinates[i].y2,\n          x2: boxCoordinates[i].x3, y2: boxCoordinates[i].y3}, lineCoordinates);\n        let line2Id = this.findALineFromCoordinates({x1:boxCoordinates[i].x4, y1:boxCoordinates[i].y4,\n          x2: boxCoordinates[i].x3, y2: boxCoordinates[i].y3}, lineCoordinates);\n        let line3Id = this.findALineFromCoordinates({x1:boxCoordinates[i].x1, y1:boxCoordinates[i].y1,\n          x2: boxCoordinates[i].x4, y2: boxCoordinates[i].y4}, lineCoordinates);\n\n        //map box to lines\n        boxCoordinates[i].line0Id = line0Id;\n        boxCoordinates[i].line1Id = line1Id;\n        boxCoordinates[i].line2Id = line2Id;\n        boxCoordinates[i].line3Id = line3Id;\n\n        // map lines to boxes:\n        lineCoordinates[line0Id].lineToBoxes\n          = lineCoordinates[line0Id].lineToBoxes ? [...lineCoordinates[line0Id].lineToBoxes, i]:[i];\n        lineCoordinates[line1Id].lineToBoxes\n          = lineCoordinates[line1Id].lineToBoxes ? [...lineCoordinates[line1Id].lineToBoxes, i]:[i];\n        lineCoordinates[line2Id].lineToBoxes\n          = lineCoordinates[line2Id].lineToBoxes ? [...lineCoordinates[line2Id].lineToBoxes, i]:[i];\n        lineCoordinates[line3Id].lineToBoxes\n          = lineCoordinates[line3Id].lineToBoxes ? [...lineCoordinates[line3Id].lineToBoxes, i]:[i];\n      }\n    }\n\n    this.setState({ lineCoordinates: lineCoordinates,\n                    dotCoordinates: dotCoordinates,\n                    boxCoordinates: boxCoordinates,\n                  });\n  }\n\n  isBoxCaptured = (boxId) =>{\n    // given a box ID see if its lines have been clicked i.e. is box captured\n    const l1 = this.state.boxCoordinates[boxId].line0Id\n    const l2 = this.state.boxCoordinates[boxId].line1Id\n    const l3 = this.state.boxCoordinates[boxId].line2Id\n    const l4 = this.state.boxCoordinates[boxId].line3Id\n\n    const isBoxCaptured = [l1,l2,l3,l4].reduce((areLinesClicked, currLineId) => {\n      return(areLinesClicked && this.state.lineCoordinates[currLineId].isClicked)\n    }, true);\n    return isBoxCaptured;\n  }\n\n  areAllBoxesCaptured = () => {\n    const areAllBoxesCaptured = Object.values(this.state.boxCoordinates).reduce(\n      (areBoxesCaptured, currBox) => {\n        return(areBoxesCaptured && currBox.isCaptured);\n      }, true);\n    return areAllBoxesCaptured;\n  }\n\n  findALineFromCoordinates = ({x1,y1,x2,y2}, lineCoordinates) => {\n    let lineItemsKeys = lineCoordinates? (Object.keys(lineCoordinates)): Object.keys(this.state.lineCoordinates);\n    let result={};\n    for(let i=0;i<lineItemsKeys.length;i++)\n    {\n      let lineItem = lineCoordinates[lineItemsKeys[i]]\n      if(lineItem.x1===x1 && lineItem.x2===x2 && lineItem.y1===y1 && lineItem.y2===y2){\n        result = lineItemsKeys[i]; break;\n      }\n    }\n    return result;\n  }\n\n  handleClick = (lineId) =>{\n    if(!this.state.lineCoordinates[lineId].isClicked){\n      const lineCoordinates = this.state.lineCoordinates;\n      lineCoordinates[lineId].isClicked = true;\n\n      // a line is attached to upto 2 boxes\n      // find out if the last move resulted in a box capture\n      this.setState({lineCoordinates: lineCoordinates},()=>{\n        let scoreToAdd = 0;\n        const boxCoordinates = this.state.boxCoordinates;\n        let player1Score = this.state.player1Score;\n        let player2Score = this.state.player2Score;\n        let player1IsNext = this.state.player1IsNext;\n\n        const isAnyBoxCaptured = this.state.lineCoordinates[lineId].lineToBoxes.reduce((isAnyPrevBoxCaptured, currBoxId) => {\n          const isCurrBoxCaptured = this.isBoxCaptured(currBoxId);\n          if(isCurrBoxCaptured){\n            scoreToAdd++;\n            boxCoordinates[currBoxId].isCaptured = true;\n          }\n          return(isAnyPrevBoxCaptured || isCurrBoxCaptured);\n        }, false);\n\n      // find out the latest players scores\n      // change the turn if no box was captured\n      if(isAnyBoxCaptured && this.state.player1IsNext){\n        player1Score = player1Score + scoreToAdd;\n      }\n      else if(isAnyBoxCaptured && !this.state.player1IsNext){\n        player2Score = player2Score + scoreToAdd;\n      }\n      else if(!isAnyBoxCaptured)\n        player1IsNext = !player1IsNext;\n\n      this.setState({\n        boxCoordinates: boxCoordinates,\n        player1Score: player1Score,\n        player2Score: player2Score,\n        player1IsNext: player1IsNext\n        },() =>{\n          // did the last line click result in the end of game? find results\n          let result='';\n          const areAllBoxesCaptured = this.areAllBoxesCaptured();\n          if(areAllBoxesCaptured)\n            if(this.state.player1Score > this.state.player2Score)\n              result = constants.player1Win;\n            else if(this.state.player1Score < this.state.player2Score)\n              result = constants.player2Win;\n            else if(this.state.player1Score === this.state.player2Score)\n              result = constants.matchDraw;\n          this.setState({result: result});\n        });\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <svg height=\"500\" width=\"500\" viewBox=\"0 0 600 600\" >\n\n            {/*draw player 1*/}\n            <circle cx=\"30\" cy=\"20\" r=\"17\" fill={constants.player1Color}\n              stroke={this.state.player1IsNext? 'lightblue': 'none'}\n              strokeWidth=\"3\"/>\n            <rect x=\"5\" y=\"38\" width=\"50\" height=\"30\" rx=\"10\" fill={constants.player1Color}\n              stroke={this.state.player1IsNext? 'lightblue': 'none'}\n              strokeWidth=\"3\"/>\n            <text x=\"72\" y=\"57\" fill=\"maroon\">{this.state.player1Score}</text>\n\n            <text x=\"180\" y=\"57\" fill=\"maroon\">{this.state.result}</text>\n\n            {/*draw player 2*/}\n            <circle cx=\"470\" cy=\"20\" r=\"17\" fill={constants.player2Color}\n              stroke={!this.state.player1IsNext? 'lightblue': 'none'} strokeWidth=\"3\"/>\n            <rect x=\"445\" y=\"38\" width=\"50\" height=\"30\" rx=\"10\" fill={constants.player2Color}\n              stroke={!this.state.player1IsNext? 'lightblue': 'none'} strokeWidth=\"3\"/>\n            <text x=\"415\" y=\"57\" fill=\"maroon\">{this.state.player2Score}</text>\n\n            {/*game area*/}\n            <rect y=\"90\" width=\"500\" height=\"500\" fill=\"lightblue\"/>\n            <ClickedContext.Provider value={{\n              state: this.state,\n              setClickedLineId:(value) => this.setState({clickedLineId:value})}}>\n                {\n                  Object.keys(this.state.boxCoordinates).map((i) => {\n                    let iNum = Number(i);\n                    let points = `${this.state.boxCoordinates[iNum].x1},${this.state.boxCoordinates[iNum].y1} `;\n                    points+= `${this.state.boxCoordinates[iNum].x2},${this.state.boxCoordinates[iNum].y2} `;\n                    points+= `${this.state.boxCoordinates[iNum].x3},${this.state.boxCoordinates[iNum].y3} `;\n                    points+= `${this.state.boxCoordinates[iNum].x4},${this.state.boxCoordinates[iNum].y4} `;\n                    return <Box key={i} points={points} i={i} player1IsNext={this.state.player1IsNext}\n                      lineIdsOfBox={[this.state.boxCoordinates[iNum].line0Id,\n                        this.state.boxCoordinates[iNum].line1Id,\n                        this.state.boxCoordinates[iNum].line2Id,\n                        this.state.boxCoordinates[iNum].line3Id]}/>;\n                    }\n                  )\n                }\n\n                {\n                  Object.keys(this.state.lineCoordinates).map((i) => {\n                    let result = [];\n                    result.push(<Line key={'line'+i} i={i}\n                      x1={this.state.lineCoordinates[i].x1}\n                      y1={this.state.lineCoordinates[i].y1}\n                      x2={this.state.lineCoordinates[i].x2}\n                      y2={this.state.lineCoordinates[i].y2}\n                      onClick={this.handleClick}></Line>);\n                    return result;\n                  }\n                )\n              }\n            </ClickedContext.Provider>\n\n            {Object.keys(this.state.dotCoordinates).map((i) => {\n              let result = <circle cx={this.state.dotCoordinates[i].x}\n                cy={this.state.dotCoordinates[i].y} r=\"10\" fill=\"maroon\" key={i}/>;\n              return result;\n              }\n            )}\n          </svg>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}